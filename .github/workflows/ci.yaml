name: ci
on: pull_request
jobs:
  go-lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
      - name: Run linters
        uses: golangci/golangci-lint-action@v8
        with:
          version: latest
          args: --timeout=3m
  go-test:
    strategy:
      matrix:
        platform: [ubuntu-latest]
    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install Go
        if: success()
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
      - name: go tests
        run: go test -v -covermode=count -json ./... > test.json
      - name: annotate go tests
        if: always()
        uses: guyarb/golang-test-annotations@v0.5.1
        with:
          test-results: test.json

  test:
    runs-on: ubuntu-latest
    env:
      BATON_LOG_LEVEL: debug
      # Add any environment variables needed to run baton-jira-datacenter
      BATON_INSTANCE_URL: 'http://localhost:8080'
      BATON_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      # The following parameters are passed to grant/revoke commands
      CONNECTOR_GRANT: 'group:jira-administrators:Admin:user:JIRAUSER10102'
      CONNECTOR_ENTITLEMENT: 'group:jira-administrators:Admin'
      CONNECTOR_PRINCIPAL: 'JIRAUSER10102'
      CONNECTOR_PRINCIPAL_TYPE: 'user'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Run Docker Compose as a Daemon (to start postgres and jira)
        run: docker compose -f ./docker-compose.yml up --detach

      - name: Build baton-jira-datacenter
        run: go build ./cmd/baton-jira-datacenter

      - name: Wait for Jira to finish starting up
        uses: nick-fields/retry@v3
        with:
          timeout_seconds: 5
          retry_wait_seconds: 10
          max_attempts: 10
          retry_on: error
          command: |
            curl -H "Authorization: Bearer ${{secrets.PERSONAL_ACCESS_TOKEN}}" -f http://localhost:8080/rest/auth/latest/session

      - name: Run baton-jira-datacenter
        run: ./baton-jira-datacenter

      # - name: Check for grant before revoking
      #   run: baton grants --entitlement="${{ env.CONNECTOR_ENTITLEMENT }}" --output-format=json | jq --exit-status ".grants[].principal.id.resource == \"${{ env.CONNECTOR_PRINCIPAL }}\""

#      TODO(marcos): Uncomment once provisioning is implemented.
#      - name: Revoke grants
#        run: ./baton-jira-datacenter --revoke-grant="${{ env.CONNECTOR_GRANT }}"
#
#      - name: Check grant was revoked
#        run: ./baton-jira-datacenter && baton grants --entitlement="${{ env.CONNECTOR_ENTITLEMENT }}" --output-format=json | jq --exit-status "if .grants then .grants[]?.principal.id.resource != \"${{ env.CONNECTOR_PRINCIPAL }}\" else . end"
#
#      - name: Grant entitlement
#        run: ./baton-jira-datacenter --grant-entitlement="${{ env.CONNECTOR_ENTITLEMENT }}" --grant-principal="${{ env.CONNECTOR_PRINCIPAL }}" --grant-principal-type="${{ env.CONNECTOR_PRINCIPAL_TYPE }}"
#
#      - name: Check grant was re-granted
#        run: ./baton-jira-datacenter && baton grants --entitlement="${{ env.CONNECTOR_ENTITLEMENT }}" --output-format=json | jq --exit-status ".grants[].principal.id.resource == \"${{ env.CONNECTOR_PRINCIPAL }}\""
